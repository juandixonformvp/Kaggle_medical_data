library(mlbench)
library(caret)
library(e1071)
library(MASS)
library(ggparallel)
library(rpart)
library(devtools)
library(ggbiplot)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(factoextra)
library(MatchIt)
library(splitstackshape)
library(gbm)
setwd('C:/Users/rchang/Documents/Robert/Personal/CSCI E-82/Chang_HW_3')
df <- read.csv('train_data.csv')
td <- read.csv('test_data.csv')
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
td.match <- td
td.match$output <- 1
mydata <- rbind(df, td.match[td.match$subject == 'J',])
mydata$Group <- as.logical(mydata$subject == 'J')
xnam <- paste("x", 1:222, sep="")
ynam <- paste("y", 1:222, sep="")
znam <- paste("z", 1:222, sep="")
fmla <- as.formula(paste("Group ~ ", paste(xnam, collapse= "+"), "+",  sep = "", paste(ynam, collapse= "+"), "+", paste(znam, collapse= "+")))
match.it <- matchit(fmla, data = mydata, method="nearest", ratio=1)
a <- summary(match.it)
#PSM says these are the observations in the training set most similar to Subject J
df.J <- match.data(match.it)[1:ncol(mydata)]
prop.table(table(df.J$subject)) # M & K seem closest to J
df.J <- df.J[,-671]
df.J = df.J[df.J$subject != 'J',]
df.J$subject = 'J'
td.match <- td
td.match$output <- 1
mydata <- rbind(df, td.match[td.match$subject == 'E',])
mydata$Group <- as.logical(mydata$subject == 'E')
xnam <- paste("x", 1:222, sep="")
ynam <- paste("y", 1:222, sep="")
znam <- paste("z", 1:222, sep="")
fmla <- as.formula(paste("Group ~ ", paste(xnam, collapse= "+"), "+",  sep = "", paste(ynam, collapse= "+"), "+", paste(znam, collapse= "+")))
match.it <- matchit(fmla, data = mydata, method="nearest", ratio=1)
a <- summary(match.it)
#PSM says these are the observations in the training set most similar to Subject J
df.E <- match.data(match.it)[1:ncol(mydata)]
prop.table(table(df.E$subject)) # M & K seem closest to J
df.E <- df.E[,-671]
df.E = df.E[df.E$subject != 'E',]
df.E$subject = 'E'
df <- rbind(df, df.J, df.E)
y_binary = df$output
df$output <- factor(ifelse(df$output==0, "Zero", "One"))
dfnum <- df[,1:666]
dfcat <- df[,667:670]
tdnum <- td[,1:666]
tdcat <- td[,667:669]
dfcat$SubA_Phase1 <- 0
dfcat$SubI_Phase1 <- 0
dfcat$SubM_Phase1 <- 0
dfcat$SubA_Phase2 <- 0
dfcat$SubF_Phase2 <- 0
dfcat$SubI_Phase3 <- 0
dfcat$SubL_Phase3 <- 0
dfcat$SubL_Phase4 <- 0
dfcat[dfcat$subject == "A" & dfcat$phase == 1, "SubA_Phase1"] <- 1
dfcat[dfcat$subject == "I" & dfcat$phase == 1, "SubI_Phase1"] <- 1
dfcat[dfcat$subject == "M" & dfcat$phase == 1, "SubM_Phase1"] <- 1
dfcat[dfcat$subject == "A" & dfcat$phase == 2, "SubA_Phase2"] <- 1
dfcat[dfcat$subject == "F" & dfcat$phase == 2, "SubF_Phase2"] <- 1
dfcat[dfcat$subject == "I" & dfcat$phase == 3, "SubI_Phase3"] <- 1
dfcat[dfcat$subject == "L" & dfcat$phase == 3, "SubL_Phase3"] <- 1
dfcat[dfcat$subject == "L" & dfcat$phase == 4, "SubL_Phase4"] <- 1
tdcat$SubA_Phase1 <- 0
tdcat$SubI_Phase1 <- 0
tdcat$SubM_Phase1 <- 0
tdcat$SubA_Phase2 <- 0
tdcat$SubF_Phase2 <- 0
tdcat$SubI_Phase3 <- 0
tdcat$SubL_Phase3 <- 0
tdcat$SubL_Phase4 <- 0
tdcat[tdcat$subject == "A" & tdcat$phase == 1, "SubA_Phase1"] <- 1
tdcat[tdcat$subject == "I" & tdcat$phase == 1, "SubI_Phase1"] <- 1
tdcat[tdcat$subject == "M" & tdcat$phase == 1, "SubM_Phase1"] <- 1
tdcat[tdcat$subject == "A" & tdcat$phase == 2, "SubA_Phase2"] <- 1
tdcat[tdcat$subject == "F" & tdcat$phase == 2, "SubF_Phase2"] <- 1
tdcat[tdcat$subject == "I" & tdcat$phase == 3, "SubI_Phase3"] <- 1
tdcat[tdcat$subject == "L" & tdcat$phase == 3, "SubL_Phase3"] <- 1
tdcat[tdcat$subject == "L" & tdcat$phase == 4, "SubL_Phase4"] <- 1
dfcol1 <- as.data.frame(integer(nrow(df)))
tdcol1 <- as.data.frame(integer(nrow(td)))
for (i in 1:222){
tempx <- paste("x", i, sep = "")
tempy <- paste("y", i, sep = "")
tempz <- paste("z", i, sep = "")
dfPCA <- as.data.frame(cbind(df[,tempx],df[,tempy],df[,tempz]))
tdPCA <- as.data.frame(cbind(td[,tempx],td[,tempy],td[,tempz]))
temp.pca <- prcomp(dfPCA)
dfPCApred <- as.data.frame(predict(temp.pca, newdata=dfPCA))
tdPCApred <- as.data.frame(predict(temp.pca, newdata=tdPCA))
pcacolname <- paste("pca", i, sep = "")
names(dfPCApred)[names(dfPCApred)=="PC1"] <- pcacolname
names(tdPCApred)[names(tdPCApred)=="PC1"] <- pcacolname
dfcol1 <- cbind(dfcol1,dfPCApred)
dfcol1$PC2 <- NULL
dfcol1$PC3 <- NULL
tdcol1 <- cbind(tdcol1,tdPCApred)
tdcol1$PC2 <- NULL
tdcol1$PC3 <- NULL
}
dfcol1 <- dfcol1[,-1]
tdcol1 <- tdcol1[,-1]
df.all <- cbind(dfcol1, dfcat)
td.all <- cbind(tdcol1, tdcat)
control <- trainControl(method="repeatedcv", number=2, repeats=1, search="grid")
set.seed(33)
tunegrid <- expand.grid(.mtry=c(10,15,20))
rf_gridsearch <- train(output ~ ., data = df.all, method="rf", metric="Accuracy", tuneGrid=tunegrid, trControl=control)
print(rf_gridsearch)
plot(rf_gridsearch)
varImp(rf_gridsearch)
rfpred <- predict(rf_gridsearch, newdata = df.all)
table(rfpred, df.all$output)
rfpred <- predict(rf_gridsearch, newdata = td.all)
table(rfpred)
objControl <- trainControl(method='cv', number=3, returnResamp='none', summaryFunction = twoClassSummary, classProbs = TRUE)
objModel <- train(output ~ ., data = df.all, method='gbm', trControl=objControl, metric = "ROC", preProc = c("center", "scale"))
summary(objModel)
varImp(objModel)
print(objModel)
pred <- predict(object=objModel, td.all, type='raw')
table(pred)
library(randomForest)
library(mlbench)
library(caret)
library(e1071)
library(MASS)
library(ggparallel)
library(rpart)
library(devtools)
library(ggbiplot)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(factoextra)
library(MatchIt)
library(splitstackshape)
library(gbm)
setwd('C:/Users/rchang/Documents/Robert/Personal/CSCI E-82/Chang_HW_3')
df <- read.csv('train_data.csv')
td <- read.csv('test_data.csv')
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
prop.table(table(td$state))
prop.table(table(df$state))
library(randomForest)
library(mlbench)
library(caret)
library(e1071)
library(MASS)
library(ggparallel)
library(rpart)
library(devtools)
library(ggbiplot)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(factoextra)
library(MatchIt)
library(splitstackshape)
library(gbm)
library(xgboost)
setwd('C:/Users/rchang/Documents/Robert/Personal/CSCI E-82/Chang_HW_3')
df <- read.csv('train_data.csv')
td <- read.csv('test_data.csv')
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
dfnum <- df[,1:666]
dfcat <- df[,667:670]
tdnum <- td[,1:666]
tdcat <- td[,667:669]
df[!df$state == "E", ]
df <- df[!df$state == "E", ]
td <- td[!td$state == "E", ]
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
df <- df[!df$state == "E", ]
td <- td[!td$state == "E", ]
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
df <- df[!df$state == "E", ]
td <- td[!td$state == "E", ]
td.match <- td
td.match$output <- 1
mydata <- rbind(df, td.match[td.match$subject == 'J',])
mydata$Group <- as.logical(mydata$subject == 'J')
xnam <- paste("x", 1:222, sep="")
ynam <- paste("y", 1:222, sep="")
znam <- paste("z", 1:222, sep="")
fmla <- as.formula(paste("Group ~ ", paste(xnam, collapse= "+"), "+",  sep = "", paste(ynam, collapse= "+"), "+", paste(znam, collapse= "+")))
match.it <- matchit(fmla, data = mydata, method="nearest", ratio=1)
a <- summary(match.it)
#PSM says these are the observations in the training set most similar to Subject J
df.J <- match.data(match.it)[1:ncol(mydata)]
prop.table(table(df.J$subject)) # M & K seem closest to J
df.J <- df.J[,-671]
df.J = df.J[df.J$subject != 'J',]
df.J$subject = 'J'
td.match <- td
td.match$output <- 1
mydata <- rbind(df, td.match[td.match$subject == 'E',])
mydata$Group <- as.logical(mydata$subject == 'E')
xnam <- paste("x", 1:222, sep="")
ynam <- paste("y", 1:222, sep="")
znam <- paste("z", 1:222, sep="")
fmla <- as.formula(paste("Group ~ ", paste(xnam, collapse= "+"), "+",  sep = "", paste(ynam, collapse= "+"), "+", paste(znam, collapse= "+")))
match.it <- matchit(fmla, data = mydata, method="nearest", ratio=1)
a <- summary(match.it)
#PSM says these are the observations in the training set most similar to Subject J
df.E <- match.data(match.it)[1:ncol(mydata)]
prop.table(table(df.E$subject)) # M & K seem closest to J
df.E <- df.E[,-671]
df.E = df.E[df.E$subject != 'E',]
df.E$subject = 'E'
df <- rbind(df, df.J, df.E)
y_binary = df$output
df$output <- factor(ifelse(df$output==0, "Zero", "One"))
dfnum <- df[,1:666]
dfcat <- df[,667:670]
tdnum <- td[,1:666]
tdcat <- td[,667:669]
dfcat$SubA_Phase1 <- 0
dfcat$SubI_Phase1 <- 0
dfcat$SubM_Phase1 <- 0
dfcat$SubA_Phase2 <- 0
dfcat$SubF_Phase2 <- 0
dfcat$SubI_Phase3 <- 0
dfcat$SubL_Phase3 <- 0
dfcat$SubL_Phase4 <- 0
dfcat[dfcat$subject == "A" & dfcat$phase == 1, "SubA_Phase1"] <- 1
dfcat[dfcat$subject == "I" & dfcat$phase == 1, "SubI_Phase1"] <- 1
dfcat[dfcat$subject == "M" & dfcat$phase == 1, "SubM_Phase1"] <- 1
dfcat[dfcat$subject == "A" & dfcat$phase == 2, "SubA_Phase2"] <- 1
dfcat[dfcat$subject == "F" & dfcat$phase == 2, "SubF_Phase2"] <- 1
dfcat[dfcat$subject == "I" & dfcat$phase == 3, "SubI_Phase3"] <- 1
dfcat[dfcat$subject == "L" & dfcat$phase == 3, "SubL_Phase3"] <- 1
dfcat[dfcat$subject == "L" & dfcat$phase == 4, "SubL_Phase4"] <- 1
tdcat$SubA_Phase1 <- 0
tdcat$SubI_Phase1 <- 0
tdcat$SubM_Phase1 <- 0
tdcat$SubA_Phase2 <- 0
tdcat$SubF_Phase2 <- 0
tdcat$SubI_Phase3 <- 0
tdcat$SubL_Phase3 <- 0
tdcat$SubL_Phase4 <- 0
tdcat[tdcat$subject == "A" & tdcat$phase == 1, "SubA_Phase1"] <- 1
tdcat[tdcat$subject == "I" & tdcat$phase == 1, "SubI_Phase1"] <- 1
tdcat[tdcat$subject == "M" & tdcat$phase == 1, "SubM_Phase1"] <- 1
tdcat[tdcat$subject == "A" & tdcat$phase == 2, "SubA_Phase2"] <- 1
tdcat[tdcat$subject == "F" & tdcat$phase == 2, "SubF_Phase2"] <- 1
tdcat[tdcat$subject == "I" & tdcat$phase == 3, "SubI_Phase3"] <- 1
tdcat[tdcat$subject == "L" & tdcat$phase == 3, "SubL_Phase3"] <- 1
tdcat[tdcat$subject == "L" & tdcat$phase == 4, "SubL_Phase4"] <- 1
dfcol1 <- as.data.frame(integer(nrow(df)))
tdcol1 <- as.data.frame(integer(nrow(td)))
for (i in 1:222){
tempx <- paste("x", i, sep = "")
tempy <- paste("y", i, sep = "")
tempz <- paste("z", i, sep = "")
dfPCA <- as.data.frame(cbind(df[,tempx],df[,tempy],df[,tempz]))
tdPCA <- as.data.frame(cbind(td[,tempx],td[,tempy],td[,tempz]))
temp.pca <- prcomp(dfPCA)
dfPCApred <- as.data.frame(predict(temp.pca, newdata=dfPCA))
tdPCApred <- as.data.frame(predict(temp.pca, newdata=tdPCA))
pcacolname <- paste("pca", i, sep = "")
names(dfPCApred)[names(dfPCApred)=="PC1"] <- pcacolname
names(tdPCApred)[names(tdPCApred)=="PC1"] <- pcacolname
dfcol1 <- cbind(dfcol1,dfPCApred)
dfcol1$PC2 <- NULL
dfcol1$PC3 <- NULL
tdcol1 <- cbind(tdcol1,tdPCApred)
tdcol1$PC2 <- NULL
tdcol1$PC3 <- NULL
}
dfcol1 <- dfcol1[,-1]
tdcol1 <- tdcol1[,-1]
#remove near zero-variance predictors
remove_cols <- nearZeroVar(dfcol1, names = TRUE, freqCut = 2, uniqueCut = 20)
all_cols <- names(dfcol1)
dfcol1_small <- dfcol1[ , setdiff(all_cols, remove_cols)]
df.all <- cbind(dfcol1_small, dfcat)
td.all <- cbind(tdcol1, tdcat)
control <- trainControl(method="repeatedcv", number=2, repeats=1, classProbs = TRUE)
set.seed(7)
modelGBM <- train(output ~ ., data = df.all, method='gbm', trControl=control, metric = "ROC", preProc = c("center", "scale"))
set.seed(7)
mtry <- sqrt(ncol(df.all))
tunegrid <- expand.grid(.mtry=mtry)
modelRF <- train(output ~ ., data = df.all, method="rf", metric="Accuracy", tuneGrid=tunegrid, trControl=control)
set.seed(7)
modelXGB <- train(output ~ ., data = df.all, method='xgbTree', trControl=control, metric = "Accuracy", preProc = c("center", "scale"))
results <- resamples(list(GBM=modelGBM, RF=modelRF, XGB=modelXGB))
summary(results)
bwplot(results)
dotplot(results)
varImp(modelGBM)
varImp(modelRF)
varImp(modelXGB)
pred <- predict(modelXGB, newdata = td.all)
table(pred)
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
df <- df[!df$state == "E", ]
td <- td[!td$state == "E", ]
control <- trainControl(method="repeatedcv", number=2, repeats=1, classProbs = TRUE)
set.seed(7)
modelGBM <- train(output ~ ., data = df.all, method='gbm', trControl=control, metric = "ROC", preProc = c("center", "scale"))
set.seed(7)
mtry <- sqrt(ncol(df.all))
tunegrid <- expand.grid(.mtry=mtry)
modelRF <- train(output ~ ., data = df.all, method="rf", metric="Accuracy", tuneGrid=tunegrid, trControl=control)
set.seed(7)
modelXGB <- train(output ~ ., data = df.all, method='xgbTree', trControl=control, metric = "Accuracy", preProc = c("center", "scale"))
results <- resamples(list(GBM=modelGBM, RF=modelRF, XGB=modelXGB))
summary(results)
bwplot(results)
dotplot(results)
varImp(modelGBM)
varImp(modelRF)
varImp(modelXGB)
pred <- predict(modelXGB, newdata = td.all)
table(pred)
View(df.all)
View(td.all)
prop.table(table(df$state))
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
df <- df[!df$state == "E", ]
td <- td[!td$state == "E", ]
prop.table(table(df$state))
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
df <- df[!df$state == "E", ]
td <- td[!td$state == "E", ]
prop.table(table(td$state))
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
df22 <- df[!df$state == "E", ]
td22 <- td[!td$state == "E", ]
df <- read.csv('train_data.csv')
td <- read.csv('test_data.csv')
table(df$output)
prop.table(table(df$subject,df$output), 1)
prop.table(table(df$state,df$output), 1)
prop.table(table(df$phase,df$output), 1)
prop.table(table(df$subject,df$state), 1)
prop.table(table(df$state,df$phase), 1)
prop.table(table(df$subject,df$phase), 1)
prop.table(table(df$subject))
prop.table(table(td$subject)) #Subject J is ~36% of test data but not in train data
prop.table(table(df$state))
prop.table(table(td$state))
prop.table(table(df$phase))
prop.table(table(td$phase))
prop.table(table(td$subject,td$state), 1)
prop.table(table(td$state,td$phase), 1)
prop.table(table(td$subject,td$phase), 1)
ggparallel(list('subject', 'phase', 'state', 'output'), df) # parallel coordinates
df22 <- df[!df$state == "E", ]
td22 <- td[!td$state == "E", ]
prop.table(table(df$state))
prop.table(table(td$state))
df22 <- df[!df$state == "E", ]
td22 <- td[!td$state == "E", ]
prop.table(table(df22$state))
prop.table(table(td22$state))
